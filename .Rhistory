plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))
EUI <- dfI %>%
filter(fund==setFund & year==max(as.numeric(dfI$year))) %>%
group_by(to) %>%
summarise(sum(total_amount, na.rm=T),
sum(total_eligible_cost, na.rm=T),
sum(total_eligible_expenditure, na.rm=T))
# EUI <- EUI[EUI$to %in% MSI$to,]
#
#
# EUP <- dfP %>%
#   filter(fund==setFund) %>%
#   group_by(to) %>%
#   summarise(sum(total_amount))
#
# EUP <- EUP[EUP$to %in% OPP$toM,]
# dtOP <- data.frame(setCCI,OPP[-1],OPI)
# colnames(dtOP) <- c("Name", "PlannedTO", "TOcode", "SelectionTO", "ExpenditureTO")
# dtMS <- data.frame(setMS,MSI)
# colnames(dtMS) <- c("Name", "TOcode","PlannedTO", "SelectionTO", "ExpenditureTO")
dtEU <- data.frame('EU',EUI)
colnames(dtEU) <- c("Name", "TOcode","PlannedTO", "SelectionTO", "ExpenditureTO")
dt <- dtEU
## rates calculation and set of colours
dt$valueSelection <- dt$SelectionTO/1000000
dt$valueExpenditure <- dt$ExpenditureTO/1000000
dt$ColSel <- "#48686c"
dt$ColExp <- "#f2c400"
## order of bars
dt <- dt[order(dt$TOcode), ]
dt$index <- seq(1:nrow(dt))
## plot function
ggplot() +
# selection
geom_bar(data = dt,
aes(x=reorder(TOcode, index),
y=valueSelection,
fill = ColSel,
group = Name),
position = position_dodge(width = 0.9),
stat="identity", width=0.8) +
geom_text(data = dt,
aes(label=paste0(valueSelection,"%"),
y=valueSelection,
x=TOcode,
group = Name),
size=3,
hjust = 0.5,
vjust = -0.2,
position = position_dodge(width = 0.9)) + # per essere correttamente allineato con la barra, deve usare lo stesso position del suo geom_bar
# expenditure
geom_bar(data = dt,
aes(x=reorder(TOcode, index),
y=valueExpenditure,
fill = ColExp,
group = Name),
position = position_dodge(width = 0.9),
stat="identity", width=0.4) +
geom_text(data = dt,
aes(label=paste0(valueExpenditure,"%"),
y=valueExpenditure,
x=TOcode,
group = Name),
size=3,
hjust = 0.5,
vjust = -0.2,
position = position_dodge(width = 0.9)) +
# legend, footnote
scale_fill_manual(name = "",
values=c("#48686c"="#48686c", # EU sel
"#f2c400"="#f2c400"),# EU exp
# breaks e labels gestiscono ordine ed etichette
breaks = c("#48686c","#f2c400"),
labels=c("EU rate of project selection","EU rate of expenditure declared")) +
theme_classic() +
#scale_x_discrete(labels = function(x) str_wrap(x, width = 35)) +
scale_y_continuous(expand = c(0, 0),
breaks = seq(0, max(dt$valueSelection, na.rm=T), by=10),
labels =  paste0(seq(0, max(dt$valueSelection, na.rm=T),by=10),"%")) +
coord_cartesian(ylim = c(0,max(dt$valueSelection, na.rm=T)+max(dt$valueSelection, na.rm=T)*0.1), expand = T) +
theme(legend.position = "bottom",
legend.box.margin = margin(0.5, 0.5, 0.5, 0.5), # top, right, bottom, left
legend.box.background = element_rect(colour = "white"),
legend.direction = "horizontal",
legend.title = element_blank(),
legend.text=element_text(size=10),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(hjust = 0.5, size = 10),
axis.text.y = element_text(size = 10),
#panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.5, colour = 'lightgrey'),
plot.title = element_text(face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))
dt
## rates calculation and set of colours
dt$valueSelection <- dt$SelectionTO/1000000000
dt$valueExpenditure <- dt$ExpenditureTO/1000000000
dt$ColSel <- "#48686c"
dt$ColExp <- "#f2c400"
## order of bars
dt <- dt[order(dt$TOcode), ]
dt$index <- seq(1:nrow(dt))
## plot function
ggplot() +
# selection
geom_bar(data = dt,
aes(x=reorder(TOcode, index),
y=valueSelection,
fill = ColSel,
group = Name),
position = position_dodge(width = 0.9),
stat="identity", width=0.8) +
geom_text(data = dt,
aes(label=paste0(valueSelection,"%"),
y=valueSelection,
x=TOcode,
group = Name),
size=3,
hjust = 0.5,
vjust = -0.2,
position = position_dodge(width = 0.9)) + # per essere correttamente allineato con la barra, deve usare lo stesso position del suo geom_bar
# expenditure
geom_bar(data = dt,
aes(x=reorder(TOcode, index),
y=valueExpenditure,
fill = ColExp,
group = Name),
position = position_dodge(width = 0.9),
stat="identity", width=0.4) +
geom_text(data = dt,
aes(label=paste0(valueExpenditure,"%"),
y=valueExpenditure,
x=TOcode,
group = Name),
size=3,
hjust = 0.5,
vjust = -0.2,
position = position_dodge(width = 0.9)) +
# legend, footnote
scale_fill_manual(name = "",
values=c("#48686c"="#48686c", # EU sel
"#f2c400"="#f2c400"),# EU exp
# breaks e labels gestiscono ordine ed etichette
breaks = c("#48686c","#f2c400"),
labels=c("EU rate of project selection","EU rate of expenditure declared")) +
theme_classic() +
#scale_x_discrete(labels = function(x) str_wrap(x, width = 35)) +
scale_y_continuous(expand = c(0, 0),
breaks = seq(0, max(dt$valueSelection, na.rm=T), by=10),
labels =  paste0(seq(0, max(dt$valueSelection, na.rm=T),by=10),"%")) +
coord_cartesian(ylim = c(0,max(dt$valueSelection, na.rm=T)+max(dt$valueSelection, na.rm=T)*0.1), expand = T) +
theme(legend.position = "bottom",
legend.box.margin = margin(0.5, 0.5, 0.5, 0.5), # top, right, bottom, left
legend.box.background = element_rect(colour = "white"),
legend.direction = "horizontal",
legend.title = element_blank(),
legend.text=element_text(size=10),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(hjust = 0.5, size = 10),
axis.text.y = element_text(size = 10),
#panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.5, colour = 'lightgrey'),
plot.title = element_text(face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))
dt$ColSel <- "#48686c"
dt$ColExp <- "#f2c400"
## order of bars
dt <- dt[order(dt$TOcode), ]
dt$index <- seq(1:nrow(dt))
## plot function
ggplot() +
# selection
geom_bar(data = dt,
aes(x=reorder(TOcode, index),
y=valueSelection,
fill = ColSel,
group = Name),
position = position_dodge(width = 0.9),
stat="identity", width=0.8) +
geom_text(data = dt,
aes(label=paste0(valueSelection),
y=valueSelection,
x=TOcode,
group = Name),
size=3,
hjust = 0.5,
vjust = -0.2,
position = position_dodge(width = 0.9)) + # per essere correttamente allineato con la barra, deve usare lo stesso position del suo geom_bar
# expenditure
geom_bar(data = dt,
aes(x=reorder(TOcode, index),
y=valueExpenditure,
fill = ColExp,
group = Name),
position = position_dodge(width = 0.9),
stat="identity", width=0.4) +
geom_text(data = dt,
aes(label=paste0(valueExpenditure),
y=valueExpenditure,
x=TOcode,
group = Name),
size=3,
hjust = 0.5,
vjust = -0.2,
position = position_dodge(width = 0.9)) +
# legend, footnote
scale_fill_manual(name = "",
values=c("#48686c"="#48686c", # EU sel
"#f2c400"="#f2c400"),# EU exp
# breaks e labels gestiscono ordine ed etichette
breaks = c("#48686c","#f2c400"),
labels=c("EU rate of project selection","EU rate of expenditure declared")) +
theme_classic() +
#scale_x_discrete(labels = function(x) str_wrap(x, width = 35)) +
scale_y_continuous(expand = c(0, 0),
breaks = seq(0, max(dt$valueSelection, na.rm=T), by=10),
labels =  paste0(seq(0, max(dt$valueSelection, na.rm=T),by=10))) +
coord_cartesian(ylim = c(0,max(dt$valueSelection, na.rm=T)+max(dt$valueSelection, na.rm=T)*0.1), expand = T) +
theme(legend.position = "bottom",
legend.box.margin = margin(0.5, 0.5, 0.5, 0.5), # top, right, bottom, left
legend.box.background = element_rect(colour = "white"),
legend.direction = "horizontal",
legend.title = element_blank(),
legend.text=element_text(size=10),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(hjust = 0.5, size = 10),
axis.text.y = element_text(size = 10),
#panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.5, colour = 'lightgrey'),
plot.title = element_text(face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))
round(dt$SelectionTO/1000000000,1)
dt
dt <- dtEU
## rates calculation and set of colours
dt$valueSelection <- round(dt$SelectionTO/1000000000,1)
dt$valueExpenditure <- round(dt$ExpenditureTO/1000000000,1)
dt$ColSel <- "#48686c"
dt$ColExp <- "#f2c400"
## order of bars
dt <- dt[order(dt$TOcode), ]
dt$index <- seq(1:nrow(dt))
## plot function
ggplot() +
# selection
geom_bar(data = dt,
aes(x=reorder(TOcode, index),
y=valueSelection,
fill = ColSel,
group = Name),
position = position_dodge(width = 0.9),
stat="identity", width=0.8) +
geom_text(data = dt,
aes(label=paste0(valueSelection),
y=valueSelection,
x=TOcode,
group = Name),
size=3,
hjust = 0.5,
vjust = -0.2,
position = position_dodge(width = 0.9)) + # per essere correttamente allineato con la barra, deve usare lo stesso position del suo geom_bar
# expenditure
geom_bar(data = dt,
aes(x=reorder(TOcode, index),
y=valueExpenditure,
fill = ColExp,
group = Name),
position = position_dodge(width = 0.9),
stat="identity", width=0.4) +
geom_text(data = dt,
aes(label=paste0(valueExpenditure),
y=valueExpenditure,
x=TOcode,
group = Name),
size=3,
hjust = 0.5,
vjust = -0.2,
position = position_dodge(width = 0.9)) +
# legend, footnote
scale_fill_manual(name = "",
values=c("#48686c"="#48686c", # EU sel
"#f2c400"="#f2c400"),# EU exp
# breaks e labels gestiscono ordine ed etichette
breaks = c("#48686c","#f2c400"),
labels=c("EU rate of project selection","EU rate of expenditure declared")) +
theme_classic() +
#scale_x_discrete(labels = function(x) str_wrap(x, width = 35)) +
scale_y_continuous(expand = c(0, 0),
breaks = seq(0, max(dt$valueSelection, na.rm=T), by=10),
labels =  paste0(seq(0, max(dt$valueSelection, na.rm=T),by=10))) +
coord_cartesian(ylim = c(0,max(dt$valueSelection, na.rm=T)+max(dt$valueSelection, na.rm=T)*0.1), expand = T) +
theme(legend.position = "bottom",
legend.box.margin = margin(0.5, 0.5, 0.5, 0.5), # top, right, bottom, left
legend.box.background = element_rect(colour = "white"),
legend.direction = "horizontal",
legend.title = element_blank(),
legend.text=element_text(size=10),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(hjust = 0.5, size = 10),
axis.text.y = element_text(size = 10),
#panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.5, colour = 'lightgrey'),
plot.title = element_text(face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))
dt
runApp()
runApp()
runApp()
library(rsconnect)
# cohesion-data-visualization
# setAccountInfo(name='cohesion-data-visualization',
#               token='694861E1AE5AF2EB54C61DD74AD99274',
#               secret='gbIhLpYpKhegjTosUYrYJegW9Xbl0LPvbVDdeP7e')
# CohesionView
setAccountInfo(name='cohesion-data-visualization',
token='3572BA8BA463FB02283BB185BF9E33B1',
secret='/rKOaUgMG7KDhO0iTvoD8qiYQ2wQ9SRSEtevXxil')
# deployApp('C:/Users/utente/Dropbox (t33)/Tesi/OpenDataApp/R/MS-OP')
deployApp('C:/Users/utente/Dropbox (t33)/R/Shiny/CohesionView/esify', account = "cohesion-data-visualization")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
# cohesion-data-visualization
# setAccountInfo(name='cohesion-data-visualization',
#               token='694861E1AE5AF2EB54C61DD74AD99274',
#               secret='gbIhLpYpKhegjTosUYrYJegW9Xbl0LPvbVDdeP7e')
# CohesionView
setAccountInfo(name='cohesion-data-visualization',
token='3572BA8BA463FB02283BB185BF9E33B1',
secret='/rKOaUgMG7KDhO0iTvoD8qiYQ2wQ9SRSEtevXxil')
# deployApp('C:/Users/utente/Dropbox (t33)/Tesi/OpenDataApp/R/MS-OP')
deployApp('C:/Users/utente/Dropbox (t33)/R/Shiny/CohesionView/esify', account = "cohesion-data-visualization")
library(rsconnect)
# cohesion-data-visualization
# setAccountInfo(name='cohesion-data-visualization',
#               token='694861E1AE5AF2EB54C61DD74AD99274',
#               secret='gbIhLpYpKhegjTosUYrYJegW9Xbl0LPvbVDdeP7e')
# CohesionView
setAccountInfo(name='cohesion-data-visualization',
token='3572BA8BA463FB02283BB185BF9E33B1',
secret='/rKOaUgMG7KDhO0iTvoD8qiYQ2wQ9SRSEtevXxil')
# deployApp('C:/Users/utente/Dropbox (t33)/Tesi/OpenDataApp/R/MS-OP')
deployApp('C:/Users/utente/Dropbox (t33)/R/Shiny/CohesionView/esify', account = "cohesion-data-visualization")
setFund <- 'ERDF'
EUI <- dfI %>%
filter(fund==setFund & year==max(as.numeric(dfI$year))) %>%
group_by(to) %>%
summarise(sum(total_amount, na.rm=T),
sum(total_eligible_cost, na.rm=T),
sum(total_eligible_expenditure, na.rm=T))
# EUI <- EUI[EUI$to %in% MSI$to,]
#
#
# EUP <- dfP %>%
#   filter(fund==setFund) %>%
#   group_by(to) %>%
#   summarise(sum(total_amount))
#
# EUP <- EUP[EUP$to %in% OPP$toM,]
# dtOP <- data.frame(setCCI,OPP[-1],OPI)
# colnames(dtOP) <- c("Name", "PlannedTO", "TOcode", "SelectionTO", "ExpenditureTO")
# dtMS <- data.frame(setMS,MSI)
# colnames(dtMS) <- c("Name", "TOcode","PlannedTO", "SelectionTO", "ExpenditureTO")
dtEU <- data.frame('EU',EUI)
colnames(dtEU) <- c("Name", "TOcode","PlannedTO", "SelectionTO", "ExpenditureTO")
dt <- dtEU
## rates calculation and set of colours
dt$valueSelection <- round(dt$SelectionTO/1000000000,1)
dt$valueExpenditure <- round(dt$ExpenditureTO/1000000000,1)
dt$ColSel <- "#48686c"
dt$ColExp <- "#f2c400"
## order of bars
dt <- dt[order(dt$TOcode), ]
dt$index <- seq(1:nrow(dt))
## plot function
ggplot() +
# selection
geom_bar(data = dt,
aes(x=reorder(TOcode, index),
y=valueSelection,
fill = ColSel,
group = Name),
position = position_dodge(width = 0.9),
stat="identity", width=0.8) +
geom_text(data = dt,
aes(label=paste0(valueSelection),
y=valueSelection,
x=TOcode,
group = Name),
size=3,
hjust = 0.5,
vjust = -0.2,
position = position_dodge(width = 0.9)) + # per essere correttamente allineato con la barra, deve usare lo stesso position del suo geom_bar
# expenditure
geom_bar(data = dt,
aes(x=reorder(TOcode, index),
y=valueExpenditure,
fill = ColExp,
group = Name),
position = position_dodge(width = 0.9),
stat="identity", width=0.4) +
geom_text(data = dt,
aes(label=paste0(valueExpenditure),
y=valueExpenditure,
x=TOcode,
group = Name),
size=3,
hjust = 0.5,
vjust = -0.2,
position = position_dodge(width = 0.9)) +
# legend, footnote
scale_fill_manual(name = "",
values=c("#48686c"="#48686c", # EU sel
"#f2c400"="#f2c400"),# EU exp
# breaks e labels gestiscono ordine ed etichette
breaks = c("#48686c","#f2c400"),
labels=c("EU project selection (EUR bn)","EU expenditure declared (EUR bn)")) +
theme_classic() +
#scale_x_discrete(labels = function(x) str_wrap(x, width = 35)) +
scale_y_continuous(expand = c(0, 0),
breaks = seq(0, max(dt$valueSelection, na.rm=T), by=10),
labels =  paste0(seq(0, max(dt$valueSelection, na.rm=T),by=10))) +
coord_cartesian(ylim = c(0,max(dt$valueSelection, na.rm=T)+max(dt$valueSelection, na.rm=T)*0.1), expand = T) +
theme(legend.position = "bottom",
legend.box.margin = margin(0.5, 0.5, 0.5, 0.5), # top, right, bottom, left
legend.box.background = element_rect(colour = "white"),
legend.direction = "horizontal",
legend.title = element_blank(),
legend.text=element_text(size=10),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.x = element_text(hjust = 0.5, size = 10),
axis.text.y = element_text(size = 10),
#panel.border = element_rect(colour = "black", fill=NA, size=0.5),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.5, colour = 'lightgrey'),
plot.title = element_text(face="bold"),
plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# istruzioni per pushare il codice sul server
library(rsconnect)
# cohesion-data-visualization
# setAccountInfo(name='cohesion-data-visualization',
#               token='694861E1AE5AF2EB54C61DD74AD99274',
#               secret='gbIhLpYpKhegjTosUYrYJegW9Xbl0LPvbVDdeP7e')
# CohesionView
setAccountInfo(name='cohesion-data-visualization',
token='3572BA8BA463FB02283BB185BF9E33B1',
secret='/rKOaUgMG7KDhO0iTvoD8qiYQ2wQ9SRSEtevXxil')
# deployApp('C:/Users/utente/Dropbox (t33)/Tesi/OpenDataApp/R/MS-OP')
deployApp('C:/Users/utente/Dropbox (t33)/R/Shiny/CohesionView/esify', account = "cohesion-data-visualization")
shiny::runApp()
library(rsconnect)
# cohesion-data-visualization
# setAccountInfo(name='cohesion-data-visualization',
#               token='694861E1AE5AF2EB54C61DD74AD99274',
#               secret='gbIhLpYpKhegjTosUYrYJegW9Xbl0LPvbVDdeP7e')
# CohesionView
setAccountInfo(name='eu-data',
token='3572BA8BA463FB02283BB185BF9E33B1',
secret='/rKOaUgMG7KDhO0iTvoD8qiYQ2wQ9SRSEtevXxil')
deployApp('C:/Users/utente/desktop/esify', account = "eu-data")
